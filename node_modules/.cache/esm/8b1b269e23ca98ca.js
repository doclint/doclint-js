let fs,arg,ora,chalk,inquirer,appRoot,createConfigFileData;_23c‍.x([["configFileExists",()=>configFileExists],["promptForConfigurationFile",()=>promptForConfigurationFile],["createConfigurationFile",()=>createConfigurationFile],["parseArgumentsIntoOptions",()=>parseArgumentsIntoOptions]]);_23c‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_23c‍.w("arg",[["default",["arg"],function(v){arg=v}]]);_23c‍.w("ora",[["default",["ora"],function(v){ora=v}]]);_23c‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_23c‍.w("inquirer",[["default",["inquirer"],function(v){inquirer=v}]]);_23c‍.w("app-root-path",[["default",["appRoot"],function(v){appRoot=v}]]);_23c‍.w("./helpers",[["createConfigFileData",["createConfigFileData"],function(v){createConfigFileData=v}]]);







       async function configFileExists() {
  let checkFileExists = s => new Promise(r=>fs.access(s, fs.F_OK, e => r(!e)));
  const doclintJSON = await checkFileExists(`${appRoot}/doclint.json`);
  if (doclintJSON) return { exists: true, path: `${appRoot}/doclint.json`};
  const doclintRC = await checkFileExists(`${appRoot}/doclintrc`);
  if (doclintRC) return { exists: true, path: `${appRoot}/doclintrc`};
  const doclintJS = await checkFileExists(`${appRoot}/doclintrc.js`);
  if (doclintJS) return { exists: true, path: `${appRoot}/doclintrc.js`};
  return { exists: false, path: null}
}

       async function promptForConfigurationFile() {
  const questions = [
    {
      type: 'list',
      name: 'configFileType',
      message: 'Please choose which configuration file type to use',
      choices: ['doclint.json', 'doclintrc', 'doclintrc.js'],
      default: 'doclint.json',
    },
    {
      type: 'list',
      name: 'docFileType',
      message: 'Please choose your documentation file extention type',
      choices: ['Markdown: md', 'TextFile: txt'],
      default: 'Markdown: md',
    }
  ]
  const answers = await inquirer.prompt(questions);
  return answers;
}

       async function createConfigurationFile(answers) {
  const { configFileType } = answers;
  const dataJSON = createConfigFileData(answers)
  let data = JSON.stringify(dataJSON)
  if (configFileType === 'doclintrc.js') {
    data = `module.exports = ${data}`;
  }
  const path = `${appRoot}/${configFileType}`;
  fs.writeFile(path, data, { flag: 'wx' }, function (err) {
    const spinner = ora(chalk.green(`Creating a ${configFileType} config file`)).start();
    if (err) {
      spinner.fail(chalk.yellow(`Warning: You already have an existing ${configFileType} file`))
      throw err;
    }
    spinner.succeed(chalk.green(`${configFileType} created successfully`));
    process.exit()
  });
}

       function parseArgumentsIntoOptions(rawArgs) {
  const args = arg(
    {
      '--lint': Boolean,
      '--yes': Boolean,
      '--init': Boolean,
      '-l': '--lint',
      '-y': '--yes',
      '-i': '--init',
    },
    {
      argv: rawArgs.slice(2),
    }
  );
  return {
    skipPrompts: args['--yes'] || false,
    lint: args['--lint'] || false,
    file: args._[0],
    runInit: args['--init'] || false,
  };
}